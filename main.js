!function(){"use strict";class t{#t;#e;#s;#n;#r;#i;#o;#a;#l;#d;#c;#h;#u;constructor(t,e,s){let{handleImageClick:n,confirmDeletion:r,handleLikeClick:i}=e;this.#t=t.name,this.#e=t.link,this.#s=t.isLiked,this.#n=t._id,this.#r={title:this.#t,link:this.#e},this.#c=n,this.#h=r,this.#u=i,this.#i=s,this.#o=document.querySelector(this.#i).content.querySelector(".card").cloneNode(!0),this.#a=this.#o.querySelector(".card__button_type_like-inactive"),this.#l=this.#o.querySelector(".card__button_type_delete"),this.#d=this.#o.querySelector(".card__image")}#m=()=>{this.#h()};#p=()=>{this.#a.addEventListener("mousedown",(()=>{this.#u(this.#s)})),this.#l.addEventListener("mousedown",(()=>{this.#m()})),this.#d.addEventListener("mousedown",(()=>{this.#c()}))};#E(){this.#s?this.#a.classList.add("card__button_type_like-active"):this.#a.classList.remove("card__button_type_like-active")}getCardInfo(){return this.#r}getCardId(){return this.#n}getCardElement(){return this.#o}setIsLiked(t){this.#s=t,this.#E()}remove(){this.#o.remove(),this.#o=null}createCard=()=>{const t=this.#o.querySelector(".card__image"),e=this.#o.querySelector(".card__title");return t.src=this.#e,t.alt=this.#t,e.textContent=this.#t,this.#E(),this.#p(),this.#o}}class e{#f;#L;#v;constructor(t,e,s){this.#f=t,this.#L=e,this.#v=s}appendItem(t){this.#v.append(t)}prependItem(t){this.#v.prepend(t)}renderItems(){this.#f.forEach((t=>{this.#L(t)}))}}class s{#g;constructor(t){this.#g=document.querySelector(t)}getPopupElement=()=>this.#g;#C=t=>{"Escape"===t.key&&this.close()};handleClick=t=>{const e=t.target;(e.classList.contains("modal")||e.classList.contains("modal__cancel-button"))&&this.close()};open(){this.#g.classList.add("modal_opened"),document.addEventListener("keydown",this.#C)}close(){this.#g.classList.remove("modal_opened"),document.removeEventListener("keydown",this.#C)}setEventListeners(){this.#g.addEventListener("mousedown",this.handleClick)}}class n extends s{#b;#_;#k;#y;#I;#S;constructor(t,e,s){super(t),this.#b=this.getPopupElement().querySelector(".modal__form-container"),this.#_=this.#B(),this.#k=e,this.#y=this.#b.querySelector(".modal__button"),this.#S=this.#y.textContent,this.#I=s}#B(){const t={};return this.#b.querySelectorAll(".modal__input").forEach((e=>{t[e.id]=e})),t}showLoading(){this.#y.textContent=this.#I}hideLoading(){this.#y.textContent=this.#S}getInputValues=()=>{const t={};return Object.keys(this.#_).forEach((e=>{t[e]=this.#_[e].value})),t};setEventListeners=()=>{super.setEventListeners(),this.getPopupElement().addEventListener("submit",this.#k)};close(){super.close(),this.#b.reset()}}class r{#q;#x;#w;constructor(t,e){this.#q=t.nameElement,this.#x=t.descriptionElement,this.#w=t.avatarElement,this.setUserInfo(e),this.updateAvatar(e.avatar)}getUserInfo(){return{username:this.#q.textContent,description:this.#x.textContent}}setUserInfo(t){this.#q.textContent=t.name,this.#x.textContent=t.about}updateAvatar(t){this.#w.src=t}}class i{#T;#U;#y;#R;#A;#D;#F;#P;constructor(t,e){this.#T=t.inputSelector,this.#U=t.submitButtonSelector,this.#R=t.inactiveButtonClass,this.#A=t.inputErrorClass,this.#D=t.errorClass,this.#F=e,this.#y=this.#F.querySelector(this.#U)}#$(t){const e=this.#F.querySelector(`.${t.id}-error`);t.classList.add(this.#A),e.textContent=t.validationMessage,e.classList.add(this.#D)}#V(t){const e=this.#F.querySelector(`.${t.id}-error`);t.classList.remove(this.#A),e.classList.remove(this.#D),e.textContent=""}#N(t){t.validity.valid?this.#V(t):this.#$(t)}#M(){return this.#P.some((t=>!t.validity.valid))}#O(){this.#M()?(this.#y.disabled=!0,this.#y.classList.add(this.#R)):(this.#y.disabled=!1,this.#y.classList.remove(this.#R))}resetValidation(){this.#O(),this.#P.forEach((t=>{this.#V(t)}))}enableValidation(){this.#P=[...this.#F.querySelectorAll(this.#T)],this.#O(),this.#P.forEach((t=>{t.addEventListener("input",(e=>{this.#O(),this.#N(t)}))}))}}const o=document,a="profile-form",l="card-form",d={profileForm:o.forms[a],addCardForm:o.forms[l]},c={cardEditor:".card-modal",profileEditor:".profile-modal",imageModal:".preview-modal",confirmationModal:".confirmation-modal",avatarModal:".update-avatar-modal",cardTemplate:"#card_template"},h=(d.profileForm.querySelector(".name-input"),d.profileForm.querySelector(".description-input"),d.addCardForm.querySelector(".title-input"),d.addCardForm.querySelector(".link-input"),{profileEditButton:o.querySelector(".profile__edit-button"),addCardButton:o.querySelector(".profile__add-button"),avatarEditButton:o.querySelector(".profile__avatar-overlay"),profileSubmitButton:o.getElementById("profile-submit-button"),cardSubmitButton:o.getElementById("card-submit-button"),avatarSubmitButton:o.getElementById("avatar-submit-button"),confirmationButton:o.getElementById("confirmation-button")}),u={editorName:d.profileForm.elements.username,editorDescription:d.profileForm.elements.description,cardName:d.addCardForm.elements.name,cardURL:d.addCardForm.elements.url},m={galleryCardList:o.querySelector(".gallery__cards"),profileName:o.querySelector(".profile__name"),profileDescription:o.querySelector(".profile__description"),profileAvatar:o.querySelector(".profile__avatar")},p=new class extends s{#j;#J;constructor(t){super(t),this.#j=this.getPopupElement().querySelector(".modal__image"),this.#J=this.getPopupElement().querySelector(".modal__image-title")}open(t){let{link:e,title:s}=t;this.#j.src=e,this.#j.alt=s,this.#J.textContent=s,super.open()}}(c.imageModal);p.setEventListeners();const E=new n(c.profileEditor,(function(t){t.preventDefault();const e={name:E.getInputValues().username,about:E.getInputValues().description};E.showLoading(),S.patchUserInfo(e).then((t=>{C.setUserInfo(t),E.close()})).catch((t=>{S.catchErrors(t)})).finally((()=>{E.hideLoading()}))}),"Saving...");E.setEventListeners();const f=new n(c.cardEditor,(function(t){t.preventDefault(),f.showLoading(),S.addNewCard(f.getInputValues()).then((t=>{const e=y(t);g.prependItem(e),f.close()})).catch((t=>{console.error(t)})).finally((()=>{f.hideLoading()}))}),"Saving...");f.setEventListeners();const L=new n(c.avatarModal,(function(t){t.preventDefault(),L.showLoading(),S.updateAvatar(L.getInputValues()).then((t=>{C.updateAvatar(t.avatar),L.close()})).catch((t=>{S.catchErrors(t)})).finally((()=>{L.hideLoading()}))}),"Saving...");L.setEventListeners();const v=new class extends s{#H;#z;#G;#S;#I;constructor(t,e,s){super(t),this.#H=this.getPopupElement().querySelector(".modal__button"),this.#I=s,this.#S=this.#H.textContent}#K=()=>{this.#z(this.#G)};setAction(t,e){this.#z=t,e&&(this.#G=e)}showLoading(){this.#H.textContent=this.#I}hideLoading(){this.#H.textContent=this.#S}setEventListeners(){super.setEventListeners(),this.#H.addEventListener("mousedown",this.#K)}}(c.confirmationModal,I,"Deleting...");let g,C;v.setEventListeners();const b={};var _;function k(t){const e=y(t);g.appendItem(e)}function y(e){const s=new t(e,{handleImageClick:()=>{p.open(s.getCardInfo())},confirmDeletion:()=>{v.setAction(I,{card:s}),v.open()},handleLikeClick:t=>{t?S.removeCardLike(s.getCardId()).then((t=>s.setIsLiked(t.isLiked))).catch((t=>S.catchErrors(t))):S.addCardLike(s.getCardId()).then((t=>s.setIsLiked(t.isLiked))).catch((t=>S.catchErrors(t)))}},c.cardTemplate);return s.createCard()}function I(t){let{card:e}=t;console.log(e),v.showLoading(),S.deleteCard(e.getCardId()).then((t=>{e.remove(),e=null,v.close()})).catch((t=>{S.catchErrors(t)})).finally((()=>{v.hideLoading()}))}_={formSelector:".modal__form-container",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},[...document.querySelectorAll(_.formSelector)].forEach((t=>{const e=new i(_,t);e.enableValidation(),b[t.getAttribute("id")]=e})),h.profileEditButton.addEventListener("click",(()=>{const t=C.getUserInfo();u.editorName.value=t.username,u.editorDescription.value=t.description,b[a].resetValidation(),E.open()})),h.addCardButton.addEventListener("click",(()=>{b[l].resetValidation(),f.open()})),h.avatarEditButton.addEventListener("click",(()=>{b["avatar-form"].resetValidation(),L.open()}));const S=new class{#Q;#W;constructor(t){this.#Q=t.baseURL,this.#W=t.headers}#X(t){return t.ok?t.json():Promise.reject(`Error: ${t.status}`)}catchErrors(t){console.error(`Error: ${t.status}`)}addNewCard(t){return fetch(`${this.#Q}/cards`,{method:"POST",headers:this.#W,body:JSON.stringify(t)}).then(this.#X)}patchUserInfo(t){return fetch(`${this.#Q}/users/me`,{method:"PATCH",headers:this.#W,body:JSON.stringify(t)}).then(this.#X)}deleteCard(t){return fetch(`${this.#Q}/cards/${t}`,{method:"DELETE",headers:this.#W}).then(this.#X)}updateAvatar(t){return fetch(`${this.#Q}/users/me/avatar`,{method:"PATCH",headers:this.#W,body:JSON.stringify({avatar:t.avatar})}).then(this.#X)}getUserInfo(){return fetch(`${this.#Q}/users/me`,{headers:this.#W}).then(this.#X)}getCardList(){return fetch(`${this.#Q}/cards`,{headers:this.#W}).then(this.#X)}addCardLike(t){return fetch(`${this.#Q}/cards/${t}/likes`,{method:"PUT",headers:this.#W}).then(this.#X)}removeCardLike(t){return fetch(`${this.#Q}/cards/${t}/likes`,{method:"DELETE",headers:this.#W}).then(this.#X)}}({baseURL:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"855bc2dc-d7e9-4b86-b39d-0756d927d932","Content-Type":"application/json"}});Promise.all([S.getCardList(),S.getUserInfo()]).then((t=>{let[s,n]=t;C=new r({nameElement:m.profileName,descriptionElement:m.profileDescription,avatarElement:m.profileAvatar},n),g=new e(s,k,m.galleryCardList),g.renderItems()})).catch((t=>{S.catchErrors(t)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,